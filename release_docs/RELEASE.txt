HDF version 4.3.1-1 currently under development
====================================================

INTRODUCTION

This document describes the differences between this release and the
HDF 4.2.16-2 release.  It is written for people who are familiar with
previous releases of HDF and wish to migrate to this version of HDF.

Note that the HDF4 documentation will be updated at the time of
each final release and can be found on the HDF4 support page at:

    https://portal.hdfgroup.org/display/HDF4/HDF4

The official HDF4 releases can be obtained from:

    https://portal.hdfgroup.org/downloads/index.html

If you have any questions or comments, please send them to the HDF Help Desk:

     help@hdfgroup.org

CONTENTS

- New features and changes
  -- Configuration
  -- C Library
- Bugs fixed since HDF 4.3.0
  -- Configuration
  -- Library
  -- Utilities
- Documentation
- Platforms Tested
- Known problems


New features and changes
========================
    Configuration:
    -------------
    - The NetCDF interface has been removed from both C and Fortran

      The HDF4 multi-file interface is built on NetCDF 2.3.2, which was
      copied and modified instead of used as a library. HDF4 then exported
      this API for public use.

      This exported NetCDF API causes conflicts when both HDF4 and NetCDF
      are used in the same application, so name-mangling hacks were added to
      hide the NetCDF symbols. Since most people now enable the name mangling
      scheme (via --disable-netcdf, etc.) and get their NetCDF API from
      Unidata, the HDF4 NetCDF 2.3.2 API has been removed from both the C
      and Fortran exported API.

      Autotools:
        * The --enable-netcdf option has been removed
      
      CMake:
        * The HDF4_ENABLE_NETCDF option has been removed

      C API:
        * The hdf2netcdf.h and hdf4_netcdf.h header files are no longer
          distributed with the library

        * The following variables have been removed:
            - ncerr
            - ncopts

        * The following functions have been removed:
            - nccreate
            - ncopen
            - ncredef
            - ncendef
            - ncclose
            - ncinquire
            - ncsync
            - ncabort
            - ncdimdef
            - ncdimid
            - ncdiminq
            - ncdimrename
            - ncvardef
            - ncvarid
            - ncvarinq
            - ncvarput1
            - ncvarget1
            - ncvarput
            - ncvarget
            - ncvarputs
            - ncvargets
            - ncvarputg
            - ncvargetg
            - ncvarrename
            - ncattput
            - ncattinq
            - ncattget
            - ncattcopy
            - ncattname
            - ncattrename
            - ncattdel
            - nctypelen
            - ncsetfill
            - ncrecinq
            - ncrecget
            - ncrecput
            - ncnobuf

        * The following typedefs have been removed:
            - nc_type
            - nclong

        * The following #defined symbols have been removed:
            - NC_RDWR
            - NC_CREAT
            - NC_EXCL
            - NC_INDEF
            - NC_NSYNC
            - NC_HSYNC
            - NC_NDIRTY
            - NC_HDIRTY
            - NC_NOFILL
            - NC_LINK
            - NC_FILL
            - NC_NOWRITE
            - NC_WRITE
            - NC_CLOBBER
            - NC_NOCLOBBER
            - NC_UNLIMITED
            - NC_GLOBAL
            - NC_UNSPECIFIED
            - NC_BYTE
            - NC_CHAR
            - NC_SHORT
            - NC_LONG
            - NC_FLOAT
            - NC_DOUBLE
            - NC_BITFIELD
            - NC_STRING
            - NC_IARRAY
            - NC_DIMENSION
            - NC_VARIABLE
            - NC_ATTRIBUTE
            - NC_NOERR
            - NC_EBADID
            - NC_ENFILE
            - NC_EEXIST
            - NC_EINVAL
            - NC_EPERM
            - NC_ENOTINDEFINE
            - NC_EINDEFINE
            - NC_EINVALCOORDS
            - NC_EMAXDIMS
            - NC_ENAMEINUSE
            - NC_ENOTATT
            - NC_EMAXATTS
            - NC_EBADTYPE
            - NC_EBADDIM
            - NC_EUNLIMPOS
            - NC_EMAXVARS
            - NC_ENOTVAR
            - NC_EGLOBAL
            - NC_ENOTNC
            - NC_ESTS
            - NC_EMAXNAME
            - NC_ENTOOL
            - NC_EUNLIMIT
            - NC_EXDR
            - NC_SYSERR
            - NC_FATAL
            - NC_VERBOSE

        * The following #defined symbols were moved to mfhdf.h from hdf4_netcdf.h:
            - FILL_BYTE
            - FILL_CHAR
            - FILL_SHORT
            - FILL_LONG
            - FILL_FLOAT
            - FILL_DOUBLE

      Fortran API:
        * The netcdf.inc and netcdf.f90 files are no longer distributed with the library

        * The following functions have been removed:
            - nccre
            - ncopn
            - ncddef
            - ncdid
            - ncvdef
            - ncvid
            - nctlen
            - ncsfil

        * The following variables have been removed:
            - NCRDWR
            - NCCREAT
            - NCEXCL
            - NCINDEF
            - NCNSYNC
            - NCHSYNC
            - NCNDIRTY
            - NCHDIRTY
            - NCLINK
            - NCNOWRIT
            - NCWRITE
            - NCCLOB
            - NCNOCLOB
            - NCGLOBAL
            - NCFILL
            - NCNOFILL
            - MAXNCOP
            - MAXNCDIM
            - MAXNCATT
            - MAXNCVAR
            - MAXNCNAM
            - MAXVDIMS
            - NCNOERR
            - NCEBADID
            - NCENFILE
            - NCEEXIST
            - NCEINVAL
            - NCEPERM
            - NCENOTIN
            - NCEINDEF
            - NCECOORD
            - NCEMAXDS
            - NCENAME
            - NCENOATT
            - NCEMAXAT
            - NCEBADTY
            - NCEBADD
            - NCESTS
            - NCEUNLIM
            - NCEMAXVS
            - NCENOTVR
            - NCEGLOB
            - NCENOTNC
            - NCFOOBAR
            - NCSYSERR
            - NCFATAL
            - NCVERBOS
            - NCENTOOL

    - Corrected usage of FetchContent in the HDFLibMacros.cmake file.

      CMake version 3.30 changed the behavior of the FetchContent module to deprecate
      the use of FetchContent_Populate() in favor of FetchContent_MakeAvailable(). Therefore,
      the copying of HDF specialized CMakeLists.txt files to the dependent project's source
      was implemented in the FetchContent_Declare() call.

    - Renamed HDF4_ENABLE_USING_MEMCHECKER to HDF4_USING_ANALYSIS_TOOL

      The HDF4_USING_ANALYSIS_TOOL is used to indicate to test macros that
      an analysis tool is being used and that the tests should not use
      the runTest.cmake macros and it's variations. The analysis tools,
      like valgrind, test the macro code instead of the program under test.

    - The HDF4-build ncgen and ncdump tools have been removed

      We no longer provide these tools through HDF4. They were wildly
      out-of-date (circa 1993) and we find no value in maintaining ancient
      versions of tools that are better obtained elsewhere.

      If you need ncdump or ncgen, you should get them from a netCDF
      distribution. The official version of these tools can be found
      on GitHub or via your favorite package manager.

        https://github.com/Unidata/netcdf-c
 
    C Library:
    ----------
    - Removed intn and uintn from headers

      These types represent native integers and unsigned integers and have
      been typedef'd to int and unsigned in for a long time. They are
      retained in hdf.h so old code will compile, but other public headers
      now use int and unsigned in place of these types.

Bugs fixed since HDF 4.3.0
===========================
    -

Documentation
=============


Platforms Tested
================
This version has been tested in the following platforms:

(Format:
   uname -s, uname -r
   uname -v, uname -p, uname -m)

    Linux 6.7.4                      GNU gcc (GCC) 13.2.1
    Fedora 39                        Clang version 17.0.6
                                     
    Linux 5.15.0                     GNU gcc (GCC) 11.3.0, 11.4.0, 12
    Ubuntu SMP x86_64 GNU/Linux      GNU Fortran (GCC) 11.3.0, 12
    Ubuntu 22.04                     Clang version 14.0.0
                                     Intel OneApi 2023.1.0, 2023.2.0, 2024.0
                                     Nvidia nvc 23.9
                                     AOCC 4.1.0, Clang 16.0.3
                                     Mingw, GNU GCC 10.0.0
                                     (cmake and autotools)

    Linux 5.13.0                     GNU gcc (GCC) 9.4.0
    Ubuntu SMP x86_64 GNU/Linux      GNU Fortran (GCC) 9.4.0
    Ubuntu 20.04                     Clang version 10.0.0
                                     Intel OneApi 2023.1.0
                                     (cmake and autotools)

    Linux 4.18.0-348.7.1.el8_5       gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-4)
    #1 SMP x86_64 GNU/Linux          GNU Fortran (GCC) 8.5.0 20210514 (Red Hat 8.5.0-4)
    CentOS8                          clang version 12.0.1 (Red Hat 12.0.1)
                                     Intel OneApi 2023.1.0
                                     (cmake and autotools)

    Linux 3.10.0-1160.36.2.el7.ppc64 gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
    #1 SMP ppc64 GNU/Linux           g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
    (echidna)                        GNU Fortran (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
                                     IBM XL C/C++ V13.1
                                     IBM XL Fortran V15.1f
 
    Linux 3.10.0-327.18.2.el7.x86_64 GNU C (gcc) and Fortran (gfortran) compilers:
    #1 SMP x86_64, GNU/Linux             Version 4.8.5 20150623 (Red Hat 4.8.5-4)
    (jelly/moohan)                       Version 5.3.0, 6.3.0, 7.2.0, 8.3.0, 9.1.0, 10.2.0
                                     Intel(R) C (icc) and Fortran (ifort) compilers:
                                        Version 17.0.0.098 Build 20160721
                                     pgcc and pgf90 17.10-0 64-bit target
                                         on x86-64 Linux -tp haswell

    Linux 2.6.32-754.11.1.el6.x86_64  gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-16)
    #1 SMP, x86_64                    GNU Fortran (GCC) 4.4.7 20120313 (Red Hat 4.4.7-16)
    (platypus)                        icc (ICC) 17.0.0.098 Build 20160721
                                      ifort (IFORT) 17.0.0.098 Build 20160721
                                      pgcc and pgf90 17.10-0 64-bit target
                                         on x86-64 Linux -tp nehalem

    macOS Sonoma 14                  Apple clang version 15.0.7
    Darwin 23.2.0 arm64              Clang 17.0.0

    macOS Ventura 13.6.4             Apple clang version 15.0.0
    Darwin 22.6.0 x86_64

    macOS Monterey 12                Apple clang version 14.0.0
    Darwin 21.6.0 x86_64             gfortran GNU Fortran (Homebrew GCC 13.2.0) 13.2.0
    (philo)                          Intel icc/icpc/ifort version 2021.10.0 20230609

    macOS Apple M1 11.7.3            Apple clang version 13.0.0 (clang-1300.0.29.30)
    Darwin 20.6.0 arm64              gfortran GNU Fortran (Homebrew GCC 12.2.0) 12.2.0
    (macmini-m1)                     Intel icc/icpc/ifort version 2021.8.0 20221120

    macOS Big Sur 11.7.3             Apple clang version 12.0.5 (clang-1205.0.22.9)
    Darwin 20.4.0 x86_64             gfortran GNU Fortran (Homebrew GCC 12.2.0) 12.2.0
    (bigsur-1)                       Intel icc/icpc/ifort version 2021.7.1 20221019

    Windows 10 x64                  Visual Studio 2019 w/ clang 12.0.0
                                        with MSVC-like command-line (C/C++ only - cmake)
                                    Visual Studio 2019 w/ Intel C/C++/Fortran oneAPI 2024 (cmake)
                                    Visual Studio 2022 w/ clang 17.0.1
                                        with MSVC-like command-line (C/C++ only - cmake)
                                    Visual Studio 2022 w/ Intel C/C++/Fortran oneAPI 2024 (cmake)

Known problems
==============
o  The test_sd() test in mfhdf's hdftest can fail depending on the privileges
   of the account running the test. We've engineered around cases like running
   as root, but you may still encounter test failures when running that test
   from highly privileged accounts that can open read-only files for writing.

o  The Fortran interface does not work on 64-bit systems as it stores addresses
   in memory as Fortran INTEGER values, which are typically 32-bit. The
   Fortran interface is currently disabled by default due to this. It should
   only be enabled on 32-bit systems.

o  CMake files do not behave correctly with paths containing spaces.
   Do not use spaces in paths because the required escaping for handling spaces
   results in very complex and fragile build files.
   ADB - 2019/05/07

o  Several Fortran examples print "^@" when displaying strings (for example,
   names of the attributes). This happens because Fortran application
   doesn't know the length of the strings passed from the C library.
   EIP - 2015-01-11, HDFFR-1477

o  CMake fails to set the full path to the install location on Windows:
    The configuration file for examples, HDF4_Examples.cmake, must be updated
    with the correct value by editing the file or using the INSTALLDIR option.
    This issue is because of spaces in the path.
   ADB - 2014/02/03

o  CMake "make install" fails installing the tools:
    Use CPack to create an install package.
   ADB - 2014/02/03

o  When building on Linux/UNIX platforms, the szip shared library files must
   be in the system library path.  This can be done by adding a link to
   the libsz.* files in the /usr/lib folder or by adding the library
   location to the LD_LIBRARY_PATH environment variable.
      Ex. export LD_LIBRARY_PATH=path_to_szip_lib:$LD_LIBRARY_PATH
   Optionally, one can use the static szip library files by adding '-static'
   to the CFLAGS environment variable.

o  Existing data written by an HDF4 Library prior to HDF 4.2r2:
   When a one-dimensional SDS and a dimension scale have
   the same name, subsequent accesses to the dimension scale or to the
   SDS might produce undesired results because the libraries could not
   distinguish between the two objects.  In the case of writing, data
   might even be corrupted.  For example, SDS data might be written to a
   dimension variable or vice versa. (bugzilla #624)

   HDF4 Library Releases 4.2r2 and later make a distinction between an SDS
   and a dimension variable.  However, as with older versions, these recent
   versions are unable to detect such conflicts in files created by earlier
   releases.  It is therefore STRONGLY recommended to check for such name
   duplication before working with data created with a pre-4.2r2 library.

   The functions SDgetnumvars_byname and SDnametoindices are provided
   to help detect such name conflicts and select the correct object to
   access, respectively; see the HDF Reference Manual entries for
   further details.
   FB - 2009/01/26
   BMR - revised 2011/06/24

o  N-bit compression is not supported with Fortran APIs.

o  Using both fill-value and compression on SD datasets does not work.

o  When using PGI compilers, make sure that the JPEG library is also compiled
   with a PGI C compiler; linking with a JPEG library built with gcc causes
   JPEG library tests to fail.  To bypass the problem:

       x Set LIBS flag to $PGI_JPEG_INSTALL_DIR/lib/libjpeg.a
         where $PGI_JPEG_INSTALL_DIR points to the installation directory
         for the PGI-compiled JPEG library:

         setenv LIBS $PGI_JPEG_INSTALL_DIR/lib/libjpeg.a

       x Use the --with-jpeg=$PGI_JPEG_INSTALL_DIR configure flag to
         configure with the PGI-compiled JPEG library:

         ./configure --with-jpeg=$PGI_JPEG_INSTALL_DIR --with-zlib....

o  In order for the API SDgetdatasize to get the correct compressed size
   of the data, the dataset needs to be closed (SDendaccess) or read
   (SDreaddata) after being written and before SDgetdatasize is called.
   BMR - 2008/11/22

