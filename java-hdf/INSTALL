***************************************************************************
  CONTENTS
  --------
  1. Contents of this release

  2. Obtaining the latest version

  3. Installing the HDF Java API and JHV
  3.1 Supported Platforms
  3.2 Software Requirements
  3.3 System Requirements

  3.4 General Configuration/Installation - Unix
  3.4.1 Overview
  3.4.2 Layout of configuration files

  3.4.3 Running configure
  3.4.4 Compiling, Testing and Installing

  3.5 Platform-specific Notes
  3.5.1 Windows '95 or Windows NT

  3.6 Installation Location
  3.9 Specifying the System Type
  3.10 Configure Options 

  4. Man pages (javadoc)

  5. Release Notes

  6. Documentation

  7. FAQ

  8. HELP

*****************************************************************************


1.  Contents of this release
    ========================

This package contains the complete Java interface for the
HDF 4.1r1 library, and the Java HDF Viewer application.

  Java Interface for HDF:

       The Java interface for HDF consists of two parts:
            1. Java classes to interface, including 'native methods'
               and support for Java Exceptions, and data conversion.
            2. C-library that uses the Java Native Method Interface
               (JNI) to implement the Java calls to the HDF library.

       Together these provide access to almost all the routines
       of the HDF library.  This interface may be used by any
       Java application that wants to use the HDF library.

       Note that this is an interface to the regular HDF library,
       it is NOT an implementation of HDF written in Java.

       The Java Interface to HDF requires Java JDK 1.1.1 or above.
       This cannot be used with JDK 1.02.

  Java HDF Viewer (JHV):

       The JHV is a Java application to browse HDF files.  The
       JHV uses the Java Interface for HDF.  Thd JHV is a standalone
       application, it cannot be used as a network loadable applet.

       The JHV consists of three parts (plus the Java HDF interface):
           1.  Java classes for the appliation (windows, controls,
               and so on.)
           2.  A java package for 'palette' (look up table) manipulation.
           3.  A small amount of C-code to support data conversion

2. Obtaining the latest version
   ============================

    The most recent version of the distribution can be obtained from
    the NCSA ftp archive site at:

     ftp://ftp.ncsa.uiuc.edu/HDF/HDF_Current

3. Installing Java HDF API and JHV
   ===============================

    For compiling and installing the Java HDF API and JHV
    on a system, please follow these instructions. 

3.1 Supported Platforms
    ===================

  This product requires Java Development Kit JDK 1.1.1 or above.
  Not all platforms support Java at this level yet.
  
  For PLATFORM specific NOTES see the section below called
  'Platform-specific Notes'.


  Platform(OS)            C-Compiler  
  ------------            ---------- 
  Sun4(Solaris 2.5)           CC 4.0, GCC 2.7.2.1
  SGI-Indy(IRIX5.3)           CC 3.19, GCC 2.7.2.1
  IBM PC - Intel Pentium
       Solarisx86 (2.5)       GCC 2.7.2.1 
       Linux(elf)  (2.0.27)   GCC 2.7.2.1 

  Windows NT/95               Visual C++ 4.2

3.2  Software Requirements:
     ======================

  This software must be compiled with the HDF 4.1 library.  If
  HDF is already installed, it is not necessary to install or compile
  it again.


3.3 System Requirements
    ===================

    To build the HDF Java API and JHV from sources, you need:

      * an ANSI C compiler. 

      * Java Development Kit JDK 1.1.1 or above.
        *** This product cannot be compiled with JDK 1.02 ***
        
3.4 General Configuration/Installation - Unix
    =========================================

    2.4.1 Overview
    --------------        
    This distribution uses a gnu 'configure' script to guess the
    correct configuration.

    The configuration script asks for three items of information 
    which are very difficult to guess:


	   1.  The location of the HDF library and include files.
               This may be a compiled distribution, or previously
               installed libraries.
	   2.  The location of the Java Development Kit JDK 1.1.x.
               This varies across different platforms.
	   3.  Where to install HDF Java.  This might not be
	       the same location as the regular HDF library.

    As this is a relatively complex configuration, it is recommended
    that you inspect the Makefiles to make sure they are correct.

    2.4.2 Layout of configuration files
    -----------------------------------
    The following shows the layout of the files used in the configuration
    of the HDF Java API and JHV distribution.

    $(toplevel)/configure 
                configure.in (gnu -- used to generate 'configure')
                Config/config.guess
                Config/config.sub
                Config/install-sh
                Makefile.in

                native/Makefile.in
                native/hdflib/Makefile.in
                native/jhv/Makefile.in

                bin/jhv.in  (used to generate the 'jhv' script)


    2.4.3 Running configure
    -----------------------
    To build both of the libraries contained in this directory,
    run the ``configure'' script in $(toplevel), e.g.:

	./configure

    If you're using `csh' on an old version of System V, you might need 
    to type `sh ./configure instead to prevent `csh' from trying to 
    execute `configure' itself.

    2.4.5 Dealing with Configure Problems
    *************************************
    If you want to be adventurous you can try the following.

    Configure basically calls either of the two shell scripts 'config.guess' 
    or 'config.sub' depending upon whether a target platform was supplied 
    on the command line to configure. If you don't provide a target on
    the command line configure calls 'config.guess' to guess what platfrom
    it is configuring for. The shell script 'config.guess' uses the unix
    command 'uname' to figure out the CPU, vendor, and OS of the
    platform. If you do provide a target on the command line, configure
    calls the shell script 'config.sub' to build the triplet specifying
    CPU, vendor, and OS from the full or partial target provided.

    If the configure script can't determine your type of computer, give it
    a general name that the computer is generally refered to as an argument, 
    for instance './configure sun4'.  You can use the script 'config.sub' 
    to test whether a general name is recognized; if it is, config.sub 
    translates it to a triplet specifying CPU, vendor, and OS.
    (e.g hppa1.1-hp-hpux9.03 for an HP900/735 running HPUX9.03).

    If this still fails all is not lost. All the configure script really
    needs is one of the supported targets mentioned above(except NT).
    If you think your platform is close to one of the above platforms
    mentioned in the 'Supported Platforms' sections you can pass configure
    this target and it will configure the distribution for that target.

    For possible mappings you will need to look inside the shell script
    'config.sub' and look at the partial to full mappings and pick one
    that satisfies the triplet mappings found in 'configure.in' below
    the section "# per-host:'. Note that if you try a mapping and it
    does not work this means that 'config.sub' needs to be edited to
    provide the proper mapping from your target to a full mapping that
    is supported. 

    There are currently NO instructions for porting the distribution to a 
    new platform.

    2.4.4 Compiling, Testing and Installing
    ---------------------------------------
    To compile the Java HDF library and JHV type:

        make 

    To find out the available make targets type:

        make help

    To install the libraries, utilities, includes and man pages type: e.g.

        make install

3.5 Platform-specific Notes
    ========================

    3.5.1 Windows '95 or Windows NT
    -------------------------------
    To install on a Windows '95 or Windows NT machine, read the separate
    installation instructions for Windows NT:
      
        $(toplevel)/install_winNT.txt.

    To compile your program with HDF libraries, you need to define the
    architecture as INTEL86 via a /DINTEL86 preprocessor macro. 
 

3.6 Installation Location
    =====================

    The 'configure' script asks for the location of where to install
    the HDF Java classes, libraries, and support files.
    If you prefer, you can specify the directory so that `make install'
    will install the files directly in it.  This is done by giving
    `configure' the option `--prefix=PATH'.

    eg.  ./configure --prefix=/usr/local/java/hdf

    This will configure the distribution to install the libraries,
    utilities, and doc files in '/usr/local/java/hdf/lib', 
    '/usr/local/java/hdf/lib/classes.zip', '/usr/local/java/hdf/bin', 
    and '/usr/local/java/hdf/docs' respectively.


4. Man pages (javadoc)
   ===================

    To generate the man pages with 'javadoc', type:
         make javadocs

5. Release notes
   =============
    The files in sub-directory $(toplevel)/release_notes are detailed 
    descriptions for the new features. They can be used as supplemental 
    documentation for HDF4.1. These files are also available on the NCSA 
    ftp server(ftp.ncsa.uiuc.edu) in:
 
         /HDF/HDF_Current/release_notes/.

6. Documentation
   =============

   The HDF 4.1r1 documentation can be found on the NCSA ftp server
   in the directory /HDF/Documentation/HDF4.1r1/.  The
   HDF home page is at:

      http://hdf.ncsa.uiuc.edu/

7. FAQ
   ===
   An FAQ is available on our ftp server, as well as under
   "Information about HDF" on the home page.

8. HELP
   ====
   If you have any questions or comments, or would like to be
   added to or removed from our hdfnews email list, contact us
   at:

      hdfhelp@ncsa.uiuc.edu


