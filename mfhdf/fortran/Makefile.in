# Makefile for the FORTRAN interface to the Network CDF library
#
# $Id$
# NOTE: This Makefile.in is used by the Cygnus 'configure' script to
#       generate the top level Makefile.

# ############# Start of system configuration section. #############

# 'srcdir' Gets set to directory this Makefile is found in
srcdir = .
TOP_SRCDIR = ../..

prefix = $(TOP_SRCDIR)/NewHDF

exec_prefix = $(prefix)
tooldir = $(exec_prefix)/$(target)

program_transform_name =

datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
docdir = $(datadir)/doc

SHELL = /bin/sh

INSTALL = ${TOP_SRCDIR}/install-sh -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL) -m 644

# /usr/local/bin/m4 (GNU version?)
M4   = /usr/local/bin/m4
# /usr/local/bin/perl (GNU version?)
PERL = /usr/local/bin/perl

# Name of achive randomizer, usually ranlib (use 'touch' if non-existant)
RANLIB = ranlib

# Name of library archiver and flags to send, default 'AR=ar', 'ARFLAGS=r'
AR = ar
ARFLAGS = rc

# Name of remove utility, default 'RM=/bin/rm', 'RMFLAGS=-f'
RM = /bin/rm
RMFLAGS = -f

AS = as
CC = gcc
CFLAGS = -ansi
FC = f77
FFLAGS=

# Set for document generation
MAKEINFO = makeinfo
TEXI2DVI = texi2dvi

# Directory in which to install binaries
bindir = $(exec_prefix)/bin

# Directory in which to install header files.
includedir = $(prefex)/include

# Directory in which to install library files.
libdir = $(prefix)/lib

# Directory in which to install documentation info files.
infodir = $(prefix)/info

# ------------ General Macros for NETCDF --------------------
INCDIR	 = $(prefix)/include
HDF_LIB  = $(TOP_SRCDIR)/hdf/src/libdf.a
HDF_INC  = $(TOP_SRCDIR)/hdf/src/
PABLO_HINC = $(TOP_SRCDIR)/hdf/pablo
FMPOOL_INC = $(TOP_SRCDIR)/hdf/fmpool
JPEG_LIB = $(TOP_SRCDIR)/hdf/jpeg/libjpeg.a
ZLIB_LIB = $(TOP_SRCDIR)/hdf/zlib/libz.a
NETCDF_INC = $(TOP_SRCDIR)/mfhdf/libsrc
PORT_INC   = $(TOP_SRCDIR)/mfhdf/port
CPP	   = $(CC) -E
CFLAGS_NETCDF = 
CPPFLAGS_HDF  = -DNDEBUG -DHDF $(FMPOOL_FLAGS)
CPP_NETCDF    = -I. -I$(HDF_INC) -I$(NETCDF_INC) -I$(PORT_INC)
CPPFLAGS_LIB	= $(SWAP) $(NETLONG) 
CPPFLAGS_XDR	= $(CPP_XDR) 
CPPFLAGS_NETCDF =  $(CPPFLAGS_XDR) $(CPP_NETCDF) $(CPPFLAGS_LIB) $(CPPFLAGS_HDF) 
FFLAGS  =
NCDUMP	= 
NCGEN	= 
NEQN	= neqn
OS	= 
TBL	= tbl
WHICH	= which
FTPDIR	= 
VERSION	= 2.3.2
LEX	= lex
YACC	= yacc
DIFF    = diff
DIFF_FLAGS = -w


#### ----- host and target specific makefile fragments come in here.-------
### ------------------- end of makefile fragments -------------------------
# ############# End of system configuration section. ###############

OTHERDIRS = config msoft vms

PROGRAM		= ftest
#OS		= @OS@
#FC		= @FC@
#CPP_NETCDF	= -I../libsrc $(HDF_INC)
#CPPFLAGS	= $(CPPFLAGS_NF)
#CFLAGS		= @CFLAGS@
#FFLAGS		= @FFLAGS@
#HDF_LIB         = @HDF_LIB@
#JPEG_LIB        = @JPEG_LIB@
GARBAGE		= $(PROGRAM) test.nc copy.nc \
		  test*.hdf hdftest hdfout.new
HEADERS		= netcdf.inc
MANIFEST = $(DISTFILES)
DISTFILES	= $(PROGRAM).src Makefile.in README aix.m4 common.inc \
		  common.m4 depend descrip.mms fortc fortc1.sed \
		  fortc2.sed hpux.m4 irix.m4 jackets.src msoft.m4 msoft.mk \
		  osf.m4 sunos.m4 ultrix.m4 unicos.m4 vax-ultrix.m4 \
		  vms.m4 convex.m4 freebsd.m4 Linux.m4 \
		  msoft/NOTES msoft/fslen.asm msoft/ftest.for \
		  msoft/jackets.c msoft/msoft.int \
		  msoft/netcdf.inc \
		  vms/ftest.for \
		  vms/ftest.m4 \
		  vms/jackets.c \
		  vms/make.com \
		  vms/netcdf.inc \
		  mfsdf.c mfsdff.f hdftest.f \
		config/netcdf-hpux.inc config/jackets-hpux.c config/ftest-hpux.f \
		config/netcdf-irix4.inc config/jackets-irix4.c config/ftest-irix4.f \
		config/netcdf-irix5.inc config/jackets-irix5.c config/ftest-irix5.f \
		config/netcdf-irix6.inc config/jackets-irix6.c config/ftest-irix6.f \
		config/netcdf-irix32.inc config/jackets-irix32.c config/ftest-irix32.f \
		config/netcdf-sun.inc config/jackets-sun.c config/ftest-sun.f \
		config/netcdf-linux.inc config/jackets-linux.c config/ftest-linux.f \
		config/netcdf-fbsd.inc config/jackets-fbsd.c config/ftest-fbsd.f \
		config/netcdf-alpha.inc config/jackets-alpha.c config/ftest-alpha.f \
		config/netcdf-dec.inc config/jackets-dec.c config/ftest-dec.f \
		config/netcdf-aix.inc config/jackets-aix.c config/ftest-aix.f \
		config/netcdf-solaris.inc config/jackets-solaris.c config/ftest-solaris.f \
		config/netcdf-solarisx86.inc config/jackets-solarisx86.c  config/ftest-solarisx86.f \
		config/netcdf-convex.inc config/jackets-convex.c config/ftest-convex.f \
		config/netcdf-unicos.inc config/jackets-unicos.c config/ftest-unicos.f \
		config/netcdf-cm5.inc config/jackets-cm5.c config/ftest-cm5.f 

LIBOBJS		= jackets.o mfsdf.o mfsdff.o
LIBNAME		= mfhdf
#REMOTE_LIBRARY	= ../libsrc/lib$(LIBNAME).a
REMOTE_LIBRARY	= $(srcdir)/../libsrc/lib$(LIBNAME).a
OBJS		= $(PROGRAM).o $(LIBOBJS) 
#LD_XDR		= @LD_XDR@
#LD_NETCDF	= -L../libsrc -lmfhdf
LD_NETCDF	= $(srcdir)/../libsrc/libmfhdf.a
LIBS		= $(LD_NETCDF) $(LD_XDR) $(HDF_LIB) $(JPEG_LIB) $(ZLIB_LIB)
prefix		= ../../..

# directory used by extelt test.
TESTDIR = testdir

all::		FORCE
	@case "$(FC)" in \
	NONE*|none*) \
	    echo 1>&2 "\`$@' not made because no FORTRAN compiler";; \
	*) \
	    $(MAKE) $(MFLAGS) $(LOCAL_MACROS) nall ; \
	esac


nall::         FORCE
	@if test -z "$(FMPOOL_FLAGS)"; then \
	  $(MAKE) $(MFLAGS) $(LOCAL_MACROS) netcdf.inc $(REMOTE_LIBRARY); \
	else		 \
	  $(MAKE) $(MFLAGS) $(LOCAL_MACROS) FMPOOL_FLAGS="$(FMPOOL_FLAGS) -I$(FMPOOL_INC)" netcdf.inc $(REMOTE_LIBRARY); \
	fi

test:		FORCE
	@case "$(FC)" in \
	NONE*|none*) \
	    echo 1>&2 "\`$@' not made because no FORTRAN compiler";; \
	*) \
	    $(MAKE) $(MFLAGS) $(LOCAL_MACROS) $(PROGRAM); \
	    ./$(PROGRAM); \
	    $(MAKE) $(MFLAGS) $(LOCAL_MACROS) hdftest;; \
	esac

install-includes:: install

install::	FORCE
	@case "$(FC)" in \
	NONE*|none*) \
	    echo 1>&2 "\`$@' not made because no FORTRAN compiler";; \
	*) \
	    $(MAKE) $(LOCAL_MACROS) installed_headers;; \
	esac

$(PROGRAM):	$(REMOTE_LIBRARY)

# This is the master.mk.in makefile.  It contains general rules.
#

.SUFFIXES:
.SUFFIXES:	.so .o .i .c .fc .f .F .l .y

# ###########################################################################
# General Macros: (moved to make file fragment )
# ###########################################################################
#CPP		= @CPP@
#NCDUMP		= @NCDUMP@
#NCGEN		= @NCGEN@
#NEQN		= @NEQN@
#OS		= @OS@
#TBL		= @TBL@
#WHICH		= @WHICH@

# ###########################################################################
# Recursive Macros (command-line changes to others aren't supported):
# ###########################################################################
SUBDIR_MACROS = CC="$(CC)" \
	CFLAGS="$(CFLAGS)" \
	CPP="$(CPP)" \
	exec_prefix="$(exec_prefix)" \
	FC="$(FC)" \
	prefix="$(prefix)"

LOCAL_MACROS  = CC="$(CC)" \
	CFLAGS="$(CFLAGS)" \
	CPP="$(CPP)" \
	CPPFLAGS="$(CPPFLAGS)" \
	exec_prefix="$(exec_prefix)" \
	FC="$(FC)" \
	prefix="$(prefix)"

# ###########################################################################
# Recursive make(1)s in Subdirectories:
# ###########################################################################

subdir_dummy_target $(SUBDIR_TARGETS):
	@echo ""
	@dir=`echo $@ | sed 's,/.*,,'`; \
	    target=`echo $@ | sed "s,$$dir/,,"`; \
	    cd $$dir && \
	    echo "making \`$$target' in directory `pwd`" && \
	    echo "" && \
	    $(MAKE) $(MFLAGS) $(SUBDIR_MACROS) \
		prefix=$(prefix) exec_prefix=$(exec_prefix) \
		$$target || exit 1
	@echo ""
	@echo "returning to directory `pwd`"
	@echo ""


# ###########################################################################
# Compilation:
# ###########################################################################
#FORTC		= @FORTC@

# Compile FORTRAN code.
#
.f.o:
	$(FC) -c $(FFLAGS) $<
.F.o:
	ln -s $< $$$$.c \
	&& $(CPP) -DUD_FORTRAN_SOURCE $(CPPFLAGS) $(CPPFLAGS_NETCDF) $$$$.c \
	    | sed '/^# *[0-9]/d' > $*.f \
	|| (rm -f $*.f $$$$.c; exit 1) \
	&& rm $$$$.c
	$(FC) -c $(FFLAGS) $*.f
.F.f:
	ln -s $< $$$$.c \
	&& $(CPP) -DUD_FORTRAN_SOURCE $(CPPFLAGS) $(CPPFLAGS_NETCDF) $$$$.c \
	    | sed '/^# *[0-9]/d' > $@ \
	|| (rm -f $@ $$$$.c; exit 1) \
	&& rm $$$$.c

# Generate FORTRAN-callable C code.
#
.fc.o:
	$(FORTC) -O $(OS) $< > $*.c \
	    || ( rm -f $*.c; exit 1)
	$(CC) -c $(CFLAGS) $(CFLAGS_NETCDF) $(CPPFLAGS) $(CPPFLAGS_NETCDF) $*.c
.fc.c:
	$(FORTC) -O $(OS) $< > $@ \
	    || (rm -f $*.c; exit 1)

# Compile C code.
#
.c.o:
	$(CC) -c $(CPPFLAGS) $(CPPFLAGS_NETCDF) $(CFLAGS) $(CFLAGS_NETCDF) $<

# Compile lex(1) code.  This rule is here to ensure the use of CPPFLAGS.
# 
.l.o:
	rm -f $*.c
	$(LEX) -t $< > $*.c
	$(CC) -c $(CPPFLAGS) $(CPPFLAGS_NETCDF) $(CFLAGS) $(CFLAGS_NETCDF) $*.c
	rm $*.c

# C preprocess.  
#   NB: 
#	1. The output `file' is not created but appears on standard output;
#	2. Line numbering information is kept.
#
.c.i:
	$(CPP) $(CPPFLAGS) $(CPPFLAGS_NETCDF) $<


# ###########################################################################
# Libraries:
# ###########################################################################
# RANLIB		= @RANLIB@
LIBDIR		= $(prefix)/lib
LIB_A		= lib$(LIBRARY).a

library::		$(LIB_A)

# The following rule is forced because the library can be created by a
# makefile in another directory prior to the execution of the following rule.
#
$(LIB_A):		$(LIBOBJS) FORCE
	$(AR) rcuv $@ $(LIBOBJS)
	$(RANLIB) $@
#	$(LD) -b -o libmfhdf.sl $(LIBOBJS)

# The following rule is for those makefiles needing to install object
# modules in a library in another directory.  They need only define 
# REMOTE_LIBRARY and LIBOBJS.  The rule is forced for the same reason as the
# $(LIB_A) rule.
#
lib_dummy $(REMOTE_LIBRARY):	$(LIBOBJS) FORCE
	$(AR) rcuv $@ $(LIBOBJS)
	$(RANLIB) $@
#	$(LD) -b -o ../libsrc/libmfhdf.sl $(LIBOBJS)

installed_libfiles:	FORCE
	@if [ -n "$(LIBFILES)" ]; then \
	    libfiles="$(LIBFILES)"; \
	    for libfile in $$libfiles; do \
		$(MAKE) $(MFLAGS) $(LOCAL_MACROS) \
		    LIBDIR=$(LIBDIR) LIBFILE=$$libfile \
		    installed_libfile || exit 1; \
	    done; \
	else \
	    :; \
	fi

installed_library::	FORCE
	@$(MAKE) $(MFLAGS) $(LOCAL_MACROS) \
	    LIBDIR=$(LIBDIR) LIBFILE=$(LIB_A) \
	    installed_libfile

# The following target decouples the previous targets from the actual rule;
# thus, eliminating extraneous make(1) messages.
#
installed_libfile:	$(LIBDIR)/$(LIBFILE)

$(LIBDIR)/$(LIBFILE):	$(LIBDIR) $(LIBFILE)
	$(INSTALL_DATA) $(LIBFILE) $@

dummy_libdir $(LIBDIR):
	mkdir -p $@
	chmod u+rwx,g+rws,o=rx $@

LIB_SO		= lib$(LIBRARY).so.$(MAJOR_NO).$(MINOR_NO)
LIB_SA		= lib$(LIBRARY).sa.$(MAJOR_NO).$(MINOR_NO)

#library::		FORCE
#	@so_objs=`echo $(LIBOBJS) | sed 's/\.o/.so/g'`; \
#	if [ -z "$$so_objs" ]; then \
#	    :; \
#	else \
#	    $(MAKE) $(MFLAGS) $(LIB_SO) \
#		SO_OBJS="$$so_objs"; \
#	fi
#	@if [ -z "$(SA_OBJS)" ]; then \
#	    :; \
#	else \
#	    $(MAKE) $(MFLAGS) $(LIB_SA); \
#	fi

$(LIB_SO):	$(SO_OBJS)
	ld -assert pure-text $(SO_OBJS) -o $@
$(LIB_SA):	$(SA_OBJS) FORCE
	$(AR) rcuv $@ $(SA_OBJS)

.fc.so:
	$(FORTC) -O $(OS) $< > $*.c \
	    || (rm -f $*.c; exit 1)
	$(CC) -c -pic $(CFLAGS) $(CFLAGS_NETCDF) $(CPPFLAGS) $(CPPFLAGS_NETCDF) $*.c -o $$$$.o \
	    || (rm -f $$$$.o; exit 1)
	mv $$$$.o $@
.c.so:
	$(CC) -c -pic $(CFLAGS) $(CFLAGS_NETCDF) $(CPPFLAGS) $(CPPFLAGS_NETCDF) $< -o $$$$.o \
	    || (rm -f $$$$.o; exit 1)
	mv $$$$.o $@

#installed_library::	$(LIBDIR)/$(LIB_SO)
#	@if [ -z "$(SA_OBJS)" ]; then \
#	    :; \
#	else \
#	    $(MAKE) $(MFLAGS) $(LIBDIR)/$(LIB_SA); \
#	fi

$(LIBDIR)/$(LIB_SO):	$(LIBDIR) $(LIB_SO)
	$(INSTALL_DATA) $(LIB_SO) $(LIBDIR)/$(LIB_SO)
$(LIBDIR)/$(LIB_SA):	$(LIBDIR) $(LIB_SA)
	$(INSTALL_DATA) $(LIB_SA) $(LIBDIR)/$(LIB_SA)


# ###########################################################################
# Programs:
# ###########################################################################
BINDIR		= $(exec_prefix)/bin

programs:	$(PROGRAMS)
program:
	@if [ -z "$(PROGRAM)" ]; then \
	    : true; \
	else \
	    if [ -z "$(LIBRARY)" ]; then \
		: true; \
	    else \
		$(MAKE) $(MFLAGS) $(LOCAL_MACROS) library; \
	    fi; \
	    $(MAKE) $(MFLAGS) $(LOCAL_MACROS) $(PROGRAM); \
	fi

dummy_prog $(PROGRAM):	$(OBJS)
	@if [ -r $@.f -o -r $@.F ]; then \
	    ld='$(FC) $(FFLAGS)'; \
	else \
	    ld='$(CC) $(CFLAGS) $(CFLAGS_NETCDF) '; \
	fi; \
	cmd="$$ld $(OBJS) $(LIBS) -o $@"; \
	echo $$cmd; \
	$$cmd \
	    || (rm -f $@; exit 1)

installed_programs:	FORCE
	@$(MAKE) $(MFLAGS) $(LOCAL_MACROS) installed_binfiles \
	    BINDIR=$(BINDIR) BINFILES="$(PROGRAMS)"

installed_binfiles:	FORCE
	@if [ -n "$(BINFILES)" ]; then \
	    binfiles="$(BINFILES)"; \
	    for binfile in $$binfiles; do \
		$(MAKE) $(MFLAGS) $(LOCAL_MACROS) \
		    BINDIR=$(BINDIR) BINFILE=$$binfile \
		    installed_binfile || exit 1; \
	    done; \
	else \
	    :; \
	fi

installed_program:	FORCE
	@$(MAKE) $(MFLAGS) $(LOCAL_MACROS) BINDIR=$(BINDIR) BINFILE=$(PROGRAM) \
	    installed_binfile

# The following target decouples the previous targets from the actual rule;
# thus, eliminating extraneous make(1) messages.
#
installed_binfile:	$(BINDIR)/$(BINFILE)

$(BINDIR)/$(BINFILE):	$(BINDIR) $(BINFILE)
	$(INSTALL_PROGRAM) $(BINFILE) $@

dummy_bindir $(BINDIR):
	mkdir -p $@
	chmod u+rwx,g+rws,o=rx $@


# ###########################################################################
# Header files:
# ###########################################################################
installed_headers:	FORCE
	@if [ -n "$(HEADERS)" ]; then \
	    headers="$(HEADERS)"; \
	    for header in $$headers; do \
		$(MAKE) $(MFLAGS) $(LOCAL_MACROS) INCDIR=$(INCDIR) HEADER=$$header \
		    installed_header || exit 1; \
	    done; \
	else \
	    :; \
	fi

# The following target decouples the previous targets from the actual rule;
# thus, eliminating extraneous make(1) messages.
#
installed_header:	$(INCDIR)/$(HEADER)

$(INCDIR)/$(HEADER):	$(INCDIR) $(HEADER)
	$(INSTALL_DATA) $(HEADER) $@

dummy_incdir $(INCDIR):
	mkdir -p $@
	chmod u+rwx,g+rws,o=rx $@


# ###########################################################################
# `etc/' files:
# ###########################################################################
ETCDIR	= $(prefix)/etc

installed_etcfiles:
	@if [ -n "$(ETCFILES)" ]; then \
	    etcfiles="$(ETCFILES)"; \
	    for etcfile in $$etcfiles; do \
		$(MAKE) $(MFLAGS) $(LOCAL_MACROS) ETCDIR=$(ETCDIR) ETCFILE=$$etcfile \
		    installed_etcfile || exit 1; \
	    done; \
	else \
	    :; \
	fi

# The following target decouples the previous targets from the actual rule;
# thus, eliminating extraneous make(1) messages.
#
installed_etcfile:	$(ETCDIR)/$(ETCFILE)

$(ETCDIR)/$(ETCFILE):	$(ETCDIR) $(ETCFILE)
	$(INSTALL_DATA) $(ETCFILE) $@

dummy_etcdir $(ETCDIR):
	mkdir -p $@
	chmod u+rwx,g+rws,o=rx $@


# ###########################################################################
# Manual Pages:
# ###########################################################################
MANDIR	= $(prefix)/man

installed_manuals:	FORCE
	@if [ -n "$(MANUALS)" ]; then \
	    manuals="$(MANUALS)"; \
	    for manual in $$manuals; do \
		mandir=$(MANDIR)/man`echo $$manual | sed 's/.*\.\(.\).*/\1/'`; \
		$(MAKE) $(MFLAGS) $(LOCAL_MACROS) MANDIR=$$mandir MANUAL=$$manual \
		    installed_manual || exit 1; \
	    done; \
	else \
	    :; \
	fi

# The following target decouples the previous targets from the actual rule;
# thus, eliminating extraneous make(1) messages.
#
installed_manual:	$(MANDIR)/$(MANUAL)

# The first sed(1) editing command in the following replaces the expanded
# RCS keyword `$Date ...' in the `.TH' macro line with something more 
# appropriate to a manual page.
#
$(MANDIR)/$(MANUAL):	$(MANDIR) $(MANUAL)
	sed \
	 -e '/^\.TH/s/$$D\ate: \([0-9]*\)\/\([0-9]*\)\/\([0-9]*\).*\$$/\1-\2-\3/'\
	 $(MANUAL) | $(TBL) | $(NEQN) > $@

dummy_mandir $(MANDIR):
	mkdir -p $@
	chmod u+rwx,g+rws,o=rx $@

# ###########################################################################
# TeX-Info Pages:
# ###########################################################################
INFODIR       = $(prefix)/info

installed_infos:      FORCE
	if [ -z "$(MAKEINFO)" ]; then \
		echo 1>&2 "Can't install info(1) pages because no makeinfo(1)"; \
	else \
	  if [ -n "$(INFOS)" ]; then \
	      infos="$(INFOS)"; \
	      for info in $$infos; do \
		$(MAKE) $(MFLAGS) $(LOCAL_MACROS) INFODIR=$(INFODIR) INFO=$$info \
		installed_info || exit 1; \
	      done; \
	   else \
	      :; \
	   fi; \
	fi;
# The following target decouples the previous targets from the actual rule;
# thus, eliminating extraneous make(1) messages.
#
installed_info:       $(INFODIR)/$(INFO)

$(INFODIR)/$(INFO):   $(INFODIR) $(INFO)
	$(INSTALL_DATA) $(INFO) $@

dummy_infodir $(INFODIR):
	mkdir -p $@
	chmod u+rwx,g+rws,o=rx $@

# Rules for generating info pages:
#
.SUFFIXES:    .info .texi .texinfo .txn
.texi.info:
	@if [ -z "$(MAKEINFO)" ]; then \
	  echo 1>&2 "Can't create $@ because no makeinfo(1)"; \
	else \
	  $(MAKEINFO) $< --no-split --output=$@; \
	fi
.texinfo.info:
	@if [ -z "$(MAKEINFO)" ]; then \
	  echo 1>&2 "Can't create $@ because no makeinfo(1)"; \
	else \
	  $(MAKEINFO) $< --no-split --output=$@; \
	fi
.txn.info:
	@if [ -z "$(MAKEINFO)" ]; then \
	  echo 1>&2 "Can't create $@ because no makeinfo(1)"; \
	else \
	  $(MAKEINFO) $< --no-split --output=$@; \
	fi

# Ensure that info page depends on canonical TeX-Info macros.
#
dummy_info $(INFO):   texinfo.tex

# ###########################################################################
# Cleanup:
# ###########################################################################
clean::
	rm -f $(GARBAGE) $(PROGRAM) a.out core *.o *.a *.so.* *.sa.* *.so \
	    *.log $(TESTDIR)/*

realclean::	distclean
distclean::
	rm -f $(GARBAGE) $(PROGRAM) a.out core *.o *.a *.so.* *.sa.* *.so \
	    *.log Makefile config.status cc_id tags ftest.f netcdf.inc jackets.c \
	    $(TESTDIR)/*


# ###########################################################################
# Configuration:
# ###########################################################################

# The following target is touched because config.status won't update it if
# it hasn't changed.
#
# The following is commented-out because the HPUX make(1) goes into a loop.
#
#Makefile:	config.status
#	./config.status
#	touch $@

config.status:	cc_id configure
	./configure --no-create

cc_id:		FORCE
	if test -r $@ && test "`cat $@`" = "$(CC)"; then \
	    :; \
	else \
	    echo "$(CC)" > $@; \
	fi

configure:		configure.in
	autoconf


# ###########################################################################
# Dependency maintenance:
# ###########################################################################
.PRECIOUS:	depend
#
# Note: The following rule will only work if the C compiler behaves correctly
# when given the `-M' option.  AIX's cc(1) and SunOS's acc(1) behave
# incorrectly.  --Steve Emmerson 1992-09-24
#
# Furthermore, we do not attempt to maintain dependencies on installed
# header files (e.g. those in $(INCDIR)) for two reasons: 1) the dependency
# list generated at Unidata mightn't correspond to the situation at a client
# site; and 2) clients using broken compilers (c.f. previous note) can't
# regenerate the dependency list.
#
disabled_depend:		FORCE
	-incdir=`echo $(INCDIR) | sed s',/,\\\/,g'`; \
	cc -M $(CPPFLAGS) $(CPPFLAGS_NETCDF) *.c 2> /dev/null | \
	    awk '{ \
		if ($$0 ~ /:/) { \
		    target	= $$1; \
		    if (target ~ /:/) { \
			target	= substr(target,1,length(target)-1); \
			start	= 2; \
		    } else { \
			start	= 3; \
		    } \
		} else { \
		    start	= 1; \
		} \
		for (i = start; i <= NF; ++i) { \
		    if ($$i !~ /^\\/ && \
			$$i !~ /port\// && \
			$$i !~ /^\//) \
			print target ": " $$i \
		} \
	    }' > $@
	tag='### DO NOT DELETE THIS LINE.  make depend DEPENDS ON IT ###'; \
	    sed -e "/^$$tag$$/r depend" \
		-e "/^$$tag$$/q" Makefile > Makefile.new
	mv Makefile.new Makefile


# ###########################################################################
# Distributions:
# ###########################################################################
#FTPDIR		= @FTPDIR@
#VERSION		= @VERSION@

ftp:		$(FTPDIR)/$(PACKAGE)-$(VERSION).tar.Z
	test ! -h $(FTPDIR)/$(PACKAGE).tar.Z && exit 0; \
	cd $(FTPDIR) || exit 1; \
	rm $(PACKAGE).tar.Z || exit 1; \
	ln -s $(PACKAGE)-$(VERSION).tar.Z $(PACKAGE).tar.Z;

$(FTPDIR)/$(PACKAGE)-$(VERSION).tar.Z:	$(PACKAGE)-$(VERSION).tar.Z
	cp $(PACKAGE)-$(VERSION).tar.Z $@ 
	chmod u+rw,g+rw,o=r $@

tar.Z:		$(PACKAGE)-$(VERSION).tar.Z

$(PACKAGE)-$(VERSION).tar.Z:	MANIFEST
	dir=`basename \`pwd\`` \
	&& id=$(PACKAGE)-$(VERSION) \
	&& cd .. \
	&& ln -s $$dir $$id \
	&& tar -chof - `sed "s|^|$$id/|" $$id/MANIFEST` \
	    | compress > $$id/$@ \
	&& rm $$id

MANIFEST:	FORCE
	@echo 1>&2 Creating MANIFEST
	@$(MAKE) -s $(MFLAGS) $(LOCAL_MACROS) MANIFEST.echo > $@

MANIFEST.echo:	FORCE
	@$(MAKE) -s $(MFLAGS) $(LOCAL_MACROS) \
	    MANIFEST=`echo $(MANIFEST) | sed 's/MANIFEST//'` \
	    ensure_manifest > /dev/null
	@echo $(MANIFEST) | fmt -1
	@if [ -n "$(SUBDIRS)" ]; then \
	    subdirs="$(SUBDIRS)"; \
	    for subdir in $$subdirs; do \
		(cd $$subdir && \
	        echo 1>&2 Creating $@ in `pwd` && \
		$(MAKE) $(MFLAGS) $(LOCAL_MACROS) MANIFEST.echo | \
		    sed "s|^|$$subdir/|") || exit 1; \
	    done; \
	else \
	    :; \
	fi

ensure_manifest:	$(MANIFEST)

# for distribution creation
distdir = $(TOP_SRCDIR)/$(PACKAGE)-$(VERSION)/$(curdir)
curdir = mfhdf/fortran
dist: $(DISTFILES)
	for subdir in $(OTHERDIRS); do \
	  mkdir $(distdir)/$$subdir || exit 1; \
	done
	@for file in $(DISTFILES); do \
	  ln $(srcdir)/$$file $(distdir)/$$file 2> /dev/null \
	    || { echo copying $$file instead; \
	    cp -p $(srcdir)/$$file $(distdir)/$$file;}; \
	done

# ###########################################################################
# Miscellaneous:
# ###########################################################################

# The following dummy target is useful as a dependency to ensure that a
# rule is always executed.
#
FORCE:


jackets.c:	fortc1.sed fortc2.sed common.m4 jackets.src $(OS).m4
	./fortc -L . -O $(OS) jackets.src > $@

netcdf.inc:	common.inc fortc1.sed fortc2.sed common.m4 $(OS).m4
	./fortc -L . -O $(OS) common.inc > $@

$(PROGRAM).f:	fortc1.sed fortc2.sed common.m4 $(PROGRAM).src $(OS).m4
	./fortc -L . -O $(OS) $(PROGRAM).src > $@

hdftest:        FORCE
	$(FC) $(FFLAGS) hdftest.f $(LIBS) -o $@
	test -d $(TESTDIR) || mkdir $(TESTDIR)
	./hdftest > hdfout.new
	@cmd="$(DIFF) $(DIFF_FLAGS) hdfout.new hdftst.sav"; \
	    echo $$cmd; \
	    if $$cmd; then \
		echo "*** HDF passes FORTRAN test ***"; \
	    else \
		echo "*** HDF fails FORTRAN test ***"; \
		echo "The above differences are OK if small"; \
		exit 0; \
	    fi

$(PROGRAM).o:	netcdf.inc
jackets.o:	../libsrc/netcdf.h

### Everything after the following line might be overwritten ###
### DO NOT DELETE THIS LINE.  make depend DEPENDS ON IT ###
include depend
