# Makefile for Shared Memory File Buffer Pool

# Makefile.in is edited by Cygnus configure to produce a custom Makefile.

# Read installation instructions before saying "make" !!

# For compiling with source and object files in different directories.
srcdir = .
TOP_SRCDIR = ../..

# Where to install the programs and man pages.
prefix = $(TOP_SRCDIR)/NewHDF
exec_prefix = ${prefix}
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
binprefix =
manprefix =
manext = 1
mandir = $(prefix)/man/man$(manext)

# The following default options are overriden in the makefile fragment
# section below
#
# The name of your C compiler:
CC= gcc

# You may need to adjust these cc options:
CFLAGS= -O -I$(srcdir)

# Link-time cc options:
LDFLAGS= 

# To link any special libraries, add the necessary -l commands here.
LDLIBS= 

# miscellaneous OS-dependent stuff
SHELL= /bin/sh
# linker
LN= $(CC)
# file deletion command
RM = /bin/rm 
RMFLAGS = -f

# file rename command
MV= mv
# library (.a) file creation command
#AR= ar rc
AR = ar
ARFLAGS = rc

# Name of achive randomizer, usually ranlib (use 'touch' if non-existant)
RANLIB = ranlib

# second step in .a creation (use "touch" if not needed)
AR2= $(RANLIB)

# installation program
INSTALL= cp
INSTALL_PROGRAM= $(INSTALL)
INSTALL_DATA= $(INSTALL) -m 644

# -DPURIFY     -> when using purify
# -DSTATISTICS -> when you want statistics
# -DMPOOL_DEBUG -> debugging fmpool_xxx interface
# -DMP_DEBUG    -> debugging MPxxx interface
# 
#AUXFLAGS= -DPURIFY -DSTATISTICS -DMPOOL_DEBUG -DMP_DEBUG -DDEBUG
#AUXFLAGS= -DPURIFY -DSTATISTICS -DMPOOL_DEBUG -DMP_DEBUG -DCIRCLEQ_DEBUG
#AUXFLAGS= -DPURIFY -DSTATISTICS -DMP_DEBUG -DDEBUG
#AUXFLAGS= -DPURIFY -DSTATISTICS -DSTAT_DEBUG
#AUXFLAGS= -DHAVE_GETRUSAGE -DSTATISTICS
#AUXFLAGS= -DDEBUG
AUXFLAGS= 

#----------------- End of configurable options.---------------------------

# source files: FMPOOL library
LIBSOURCES= fmpool.c fmpio.c

# source files: 
APPSOURCES= 

SOURCES= $(LIBSOURCES) $(APPSOURCES)
# files included by source files
INCLUDES= cdefs.h compat.h fmptypes.h queue.h fmpio.h fmpool.h 

# documentation, test, and support files
DOCS= 

MKFILES= configure Makefile.in configure.in config.sub config.guess \
	move-if-change
CONFIGFILES= config/fmpsun.h config/fmpirix5.h config/mh-aix config/mh-alpha \
	config/mh-cm5 config/mh-convex config/mh-decstation config/mh-fbsd \
	config/mh-hpux config/mh-irix32 config/mh-irix4 config/mh-irix5 \
	config/mh-irix6 config/mh-linux config/mh-solaris config/mh-sun \
	config/mh-unicos config/fmphpux.h config/fmpalpha.h config/fmpcm5.h \
	config/fmpconvex.h config/fmpdec.h config/fmpfbsd.h config/fmpirix32.h \
	config/fmpirix4.h config/fmpirix6.h config/fmplinux.h config/fmpsolaris.h \
	config/fmpunicos.h config/fmpaix.h
OTHERFILES= run.tests
TESTFILES= test_fmpio.c tfmpio_read.c tfmpio_write.c

DISTFILES= $(DOCS) $(MKFILES) $(CONFIGFILES) $(SOURCES) $(INCLUDES) \
	$(OTHERFILES) $(TESTFILES)

LIBOBJECTS= fmpool.o fmpio.o

# object files for sample applications (excluding library files)
TOBJECTS= test_fmpio.o

# ==> specify directories where to find inludes and library
#     HDF library, and HDF utilities
HDFINC= $(srcdir)/../src
HDFLIB= $(srcdir)/../src
HDFBIN= $(srcdir)/../bin
PABLO_DIR= $(srcdir)/../pablo

#### makefile fragment from 'config/' goes here ##############
## ------------------------ end of makefile fragments--------------------

CL= ${CC} $(CFLAGS) -c -D__FMPINTERFACE_PRIVATE ${AUXFLAGS} -I. 

HDF_FLAGS       = \
        CC="$(CC)" \
        CFLAGS="$(CFLAGS)" \
        FC="$(FC)" \
        FFLAGS="$(FFLAGS)" \
        RANLIB="$(RANLIB)" \
        AR="$(AR)" \
        ARFLAGS="$(ARFLAGS)" \
        RM="$(RM)" \
        RMFLAGS="$(RMFLAGS)" \
        MACHINE="$(MACHINE)" 

LOCAL_MACROS  = CC="$(CC)" \
	CFLAGS="$(CFLAGS)" \
	CPP="$(CPP)" \
	CPPFLAGS="$(CPPFLAGS)" \
	exec_prefix="$(exec_prefix)" \
	FC="$(FC)" \
	prefix="$(prefix)"

#all: libfmpool.a

debug rebuild rebuildnofortran nofortran: all

all::         FORCE
	@if test -z "$(FMPOOL_FLAGS)"; then \
	  : true; \
	else		 \
	  $(MAKE) $(MFLAGS) $(HDF_FLAGS) pall; \
	fi

pall::         FORCE
	@if test -z "$(PABLO_FLAGS)"; then \
	  $(MAKE) $(MFLAGS) $(HDF_FLAGS) libfmpool.a; \
	else		 \
	  $(MAKE) $(MFLAGS) $(HDF_FLAGS) libfmpool.a pablolib; \
	fi

libfmpool.a: $(LIBOBJECTS) $(HDFLIB)/libdf.a
	$(RM) $(RMFLAGS) libfmpool.a
	$(AR) $(ARFLAGS) libfmpool.a  $(LIBOBJECTS)
	if test -f $(HDFLIB)/libdf.a ; then \
	  $(AR) rcuv $(HDFLIB)/libdf.a $(LIBOBJECTS); \
	  $(RANLIB) $(HDFLIB)/libdf.a ; \
	fi
	$(AR2) libfmpool.a

libfmpool: $(LIBOBJECTS)
	$(RM) $(RMFLAGS) libfmpool.a
	$(AR) $(ARFLAGS) libfmpool.a  $(LIBOBJECTS)
	$(AR2) libfmpool.a

pablolib: $(LIBOBJECTS) $(PABLO_DIR)/libdf-inst.a
	if test -f $(PABLO_DIR)/libdf-inst.a ; then \
	  $(AR) rcuv $(PABLO_DIR)/libdf-inst.a $(LIBOBJECTS); \
	  $(RANLIB) $(PABLO_DIR)/libdf-inst.a ; \
	fi

tfmp: ${INCLUDES} fmpconf.h test_fmpio.c libfmpool.a
	${CC} $(CFLAGS)  ${AUXFLAGS} -I. -c test_fmpio.c 
	$(LN) $(LDFLAGS) -o tfmp $(TOBJECTS) libfmpool.a $(LDLIBS)

tfmpr: ${INCLUDES} fmpconf.h tfmpio_read.c libfmpool.a
	${CC} $(CFLAGS)  ${AUXFLAGS} -I. -c tfmpio_read.c
	$(LN) $(LDFLAGS) -o tfmpr tfmpio_read.o libfmpool.a $(LDLIBS)

tfmpw: ${INCLUDES} fmpconf.h tfmpio_write.c libfmpool.a
	${CC} $(CFLAGS)  ${AUXFLAGS} -I. -c tfmpio_write.c
	$(LN) $(LDFLAGS) -o tfmpw tfmpio_write.o libfmpool.a $(LDLIBS)

fmpool.o: ${INCLUDES} fmpconf.h fmpool.c 
	${CL} fmpool.c

fmpio.o:  ${INCLUDES} fmpconf.h fmpio.c 
	${CL} fmpio.c

$(HDFLIB)/libdf.a:

install::  FORCE
	@if test -z "$(FMPOOL_FLAGS)"; then \
	  : true; \
	else		 \
	  $(MAKE) $(MFLAGS) $(HDF_FLAGS) fmpinstall-headers; \
	fi

install-lib:: install

install-includes::  FORCE
	@if test -z "$(FMPOOL_FLAGS)"; then \
	  : true; \
	else		 \
	  $(MAKE) $(MFLAGS) $(HDF_FLAGS) fmpinstall-headers; \
	fi

fmpinstall-lib: libfmpool.a install-headers
	$(INSTALL_DATA) libfmpool.a $(libdir)/$(binprefix)libfmpool.a

fmpinstall-headers: fmpio.h
	$(INSTALL_DATA) $(srcdir)/fmpio.h $(includedir)/fmpio.h

manpages: 
	c2man -G'File Memory Buffer Pool Stdio Interface' -ln -n fmpio.h
	c2man -G'Shared Memory File Buffer Pool' -ln -n fmpool.h

clean:
	-$(RM) $(RMFLAGS) *.o *.mp core libfmpool.a tfmp tfmpr tfmpw

distclean:
	-$(RM) $(RMFLAGS) *.o *.mp core libfmpool.a tfmp tfmpr tfmpw
	-$(RM) $(RMFLAGS) Makefile config.status fmpconf.h

distribute:
	$(RM) $(RMFLAGS) fmpoolsrc.tar*
	tar cvf fmpoolsrc.tar $(DISTFILES)
	compress -v fmpoolsrc.tar

test: tfmp
	$(RM) $(RMFLAGS) *.mp
	./run.tests
	cmp $(srcdir)/test.mp testout.mp
	cmp $(srcdir)/test1.mp test1out.mp

check: test

# The following dummy target is useful as a dependency to ensure that a
# rule is always executed.
#
FORCE:

# GNU Make likes to know which target names are not really files to be made:
.PHONY: all install install-lib install-headers clean distribute test check


fmpool.o: fmpool.c fmpool.h fmptypes.h fmpconf.h compat.h cdefs.h 
fmpio.o: fmpio.c fmpool.h fmpio.h fmptypes.h fmpconf.h compat.h cdefs.h 

