# ****************************************************************************
# * NCSA HDF                                                                 *
# * Software Development Group                                               *
# * National Center for Supercomputing Applications                          *
# * University of Illinois at Urbana-Champaign                               *
# * 605 E. Springfield, Champaign IL 61820                                   *
# *                                                                          *
# * For conditions of distribution and use, see the accompanying             *
# * hdf/COPYING file.                                                        *
# *                                                                          *
# ***************************************************************************
#
# $Id$
#
# ##################################################################
#
#           MAKEFILE for creating the Pablo Instrumentation code
#
#
### Start of system configuration section. ####
# Set shell so we know what it is
SHELL = /bin/sh

# 'srcdir' Gets set to directory this Makefile is found in
srcdir = .
TOP_SRCDIR = ../..

prefix = $(TOP_SRCDIR)/NewHDF

exec_prefix = $(prefix)
tooldir = $(exec_prefix)/$(target)

program_transform_name =

datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
docdir = $(datadir)/doc

INSTALL = ${TOP_SRCDIR}/install-sh -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL) -m 644

# /usr/local/bin/m4 (GNU version?)
M4   = /usr/local/bin/m4
# /usr/local/bin/perl (GNU version?)
PERL = /usr/local/bin/perl

# Name of achive randomizer, usually ranlib (use 'touch' if non-existant)
RANLIB = ranlib

# Name of library archiver and flags to send, default 'AR=ar', 'ARFLAGS=r'
AR = ar
ARFLAGS = r

# Name of remove utility, default 'RM=/bin/rm', 'RMFLAGS=-f'
RM = /bin/rm
RMFLAGS = -f

#Compilier defaults overriden by top level make
AS = as
CC = gcc
CFLAGS = -ansi
FC = f77
FFLAGS=

# Set for document generation
MAKEINFO = makeinfo
TEXI2DVI = texi2dvi

# Directory in which to install scripts.
bindir = $(exec_prefix)/bin

# Directory in which to install library files.
libdir = $(prefix)/lib

# Directory in which to install include files.
includedir = $(prefix)/include

# Directory in which to install documentation info files.
infodir = $(prefix)/info

# Pablo Instrumentation Library support files
PCHDRS=ProcIDs.h ProcMasks.h
PCSRCS=PabloHDF.c
PCOBJS=PabloHDF.o
PFINCS=PabloHDF.inc
PFSRCS=PabloHDFf.c PabloHDFff.f
PFOBJS=PabloHDFf.o PabloHDFff.o
POBJS=PabloHDF.o PabloHDFf.o PabloHDFff.o
PSRCS= $(PCHDRS) $(PCSRCS) $(PFINCS) $(PFSRCS)

TARGETLIB = libdf-inst.a

PABLO_INCLUDE= -I.

#### ----- host and target specific makefile fragments come in here.-------
### ------------------- end of makefile fragments -------------------------

# ############# End of system configuration section. ###############
HDF_FLAGS       = \
        CC="$(CC)" \
        CFLAGS="$(CFLAGS)" \
        FC="$(FC)" \
        FFLAGS="$(FFLAGS)" \
        RANLIB="$(RANLIB)" \
        AR="$(AR)" \
        ARFLAGS="$(ARFLAGS)" \
        RM="$(RM)" \
        RMFLAGS="$(RMFLAGS)" \
        FMPOOL_FLAGS="$(FMPOOL_FLAGS)" \
        MACHINE="$(MACHINE)" 

LOCAL_MACROS  = CC="$(CC)" \
	CFLAGS="$(CFLAGS)" \
	CPP="$(CPP)" \
	CPPFLAGS="$(CPPFLAGS)" \
	exec_prefix="$(exec_prefix)" \
	FC="$(FC)" \
	prefix="$(prefix)"

# ==> specify directories where to find inludes and library
#     HDF library, and HDF utilities
HDFINC= $(srcdir)/../src
HDFLIB= $(srcdir)/../src
HDFBIN= $(srcdir)/../bin
HDFSRC= $(srcdir)/../src

# ==> specify where to find the JPEG include files and library
JPEGINC=$(srcdir)/../jpeg
JPEGLIB=$(srcdir)/../jpeg

# ==> specify where to find the FMPOOL include and source files 
FMPOOL_INC=$(srcdir)/../fmpool
FMPOOL_SRC=$(srcdir)/../fmpool

# ==> specify where to find the gzip zlib include files and library
ZLIBINC=$(srcdir)/../zlib
ZLIBLIB=$(srcdir)/../zlib

ALL_CFLAGS= $(CFLAGS) $(PABLO_FLAGS) $(FMPOOL_FLAGS) -I. $(PABLO_INCLUDE) -I$(HDFINC) -I$(JPEGINC) -I$(ZLIBINC) -I$(FMPOOL_INC)

LINTFLAGS=
SHAR=shar
ARCHIVE=pablo.shar

MANIFEST = $(DISTFILES)
DISTFILES = Makefile.in $(PSRCS) 

# to extract all the object files out of libdf.a 
HOBJS=`ar xv $(HDFLIB)/libdf.a | sed 's/x -//'`

PINCS = $(PCHDRS) $(PFINCS)

#
#include the HDF source file definitions
#
include $(HDFSRC)/src.inc

.SUFFIXES: .c.o .f.o 

# This rule causes ansi2knr to be invoked.
#@ISANSICOM@.c.o:
#@ISANSICOM@	./ansi2knr $(srcdir)/$*.c T$*.c
#@ISANSICOM@	$(CC) $(CFLAGS) -c T$*.c
#@ISANSICOM@	$(RM) $(RMFLAGS) T$*.c $*.o
#@ISANSICOM@	$(MV) T$*.o $*.o

#ansi2knr: ansi2knr.c
#	$(CC) $(CFLAGS) $(ANSI2KNRFLAGS) -o ansi2knr ansi2knr.c

.c.o: 
	$(CC) $(CPPFLAGS) $(ALL_CFLAGS) -c $(HDFSRC)/$*.c

.f.o:
	$(FC) $(FFLAGS) -c $(HDFSRC)/$*.f

.PHONY : all nofortran clean distclean debug saber lint

#all::

all::         FORCE
	@if test -z "$(PABLO_FLAGS)"; then \
	  : true; \
	else		 \
	  $(MAKE) $(MFLAGS) $(HDF_FLAGS) pablohdf; \
	fi

pablohdf::		FORCE
	@case "$(FC)" in \
	NONE*|none*) \
	    $(MAKE) $(MFLAGS) $(HDF_FLAGS) pablonofortran;; \
	*) \
	    $(MAKE) $(MFLAGS) $(HDF_FLAGS) libdf-inst.a;; \
	esac

libdf-inst.a: $(COBJS) $(FOBJS) $(PCOBJS) $(PFOBJS)
	-$(RM) $(RMFLAGS) libdf-inst.a
	$(AR) $(ARFLAGS) libdf-inst.a $(COBJS) $(FOBJS) $(PCOBJS) $(PFOBJS)
	$(RANLIB) libdf-inst.a

pablonofortran: $(COBJS) $(PCOBJS) 
	-$(RM) $(RMFLAGS) libdf-inst.a
	$(AR) $(ARFLAGS) libdf-inst.a $(COBJS) $(PCOBJS)
	$(RANLIB) libdf-inst.a


nofortran: all

rebuild:
	@$(MAKE) all $(HDF_FLAGS) FRC=force_rebuild

rebuildnofortran:
	@$(MAKE) nofortran $(MFLAGS) $(HDF_FLAGS) FRC=force_rebuild

# Leave this target blank with no actions, the rebuild macros above depend on it
force_rebuild:

$(FOBJS): $(FRC)

debug: libdf-inst.a

saber:
	#load -D$(MACHINE) $(CSRCS) $(TSRCS) -lc

install::  FORCE
	@if test -z "$(PABLO_FLAGS)"; then \
	  : true; \
	else		 \
	  $(MAKE) $(MFLAGS) $(HDF_FLAGS) pinstall-lib; \
	fi

install-lib:: install

install-includes:: FORCE
	@if test -z "$(PABLO_FLAGS)"; then \
	  : true; \
	else		 \
	  $(MAKE) $(MFLAGS) $(HDF_FLAGS) pinstall-headers; \
	fi

pinstall-lib: pinstall-headers
	$(INSTALL_DATA) $(TARGETLIB) $(libdir)/$(TARGETLIB).n
	( cd $(libdir) ; $(RANLIB) $(libdir)/$(TARGETLIB).n )
	mv -f $(libdir)/$(TARGETLIB).n $(libdir)/$(TARGETLIB)

pinstall-headers:
	for p in $(PINCS); do \
	    $(INSTALL_DATA) \
		`pwd`/$$p $(includedir)/$$p; \
	done

depend:
	makedepend -fMakefile -- $(CSRCS)

clean:
	-$(RM) $(RMFLAGS) *.o  libdf-inst.a

distclean:
	-$(RM) $(RMFLAGS) *.o  libdf-inst.a config.status Makefile

lint: $(CSRCS) 
	$(LINT) $(LINTFLAGS) $(CSRCS)

TAGS: $(CSRCS) $(CHDRS)
	etags $(CSRCS) $(CHDRS)

# for distribution creation
distdir = $(TOP_SRCDIR)/$(PACKAGE)-$(VERSION)/$(curdir)
curdir = hdf/src
dist: $(DISTFILES)
	@for file in $(DISTFILES); do \
	  ln $(srcdir)/$$file $(distdir)/$$file 2> /dev/null \
	    || { echo copying $$file instead; \
	    cp -p $(srcdir)/$$file $(distdir)/$$file;}; \
	done

# for auto remaking, see toplevel Makefile
#Makefile: $(TOP_SRCDIR)/config.status Makefile.in
#	CONFIG_FILES=$@ CONFIG_HEADERS= $(TOP_SRCDIR)/config.status

# Tell versions [3.59,3.63) of GNU make not to export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:


# The following dummy target is useful as a dependency to ensure that a
# rule is always executed.
#
FORCE:

help:
	@echo ""
	@echo "Make supports the following targets"
	@echo "make help    - prints this usage section"
	@echo "make all     - (DEFAULT) makes Pablo stubs"
	@echo "make pablohdf       - makes Pablo stubs "
	@echo "make pablonofortran - makes Pablo stubs excluding fortran support"
	@echo "make rebuild      - rebuilds Pablo stubs "
	@echo "make rebuildnofortran - rebuilds Pablo stubs excluding"
	@echo "                        fortran support "
	@echo "make install          - install Pablo includes, "
	@echo "make clean     - cleans up Pablo stubs (*.o,..)"
	@echo "make distclean - cleans up Pablo stubs including"
	@echo "                 configuration(Makefiles,config.status,..)"
	@echo ""


# DO NOT DELETE THIS LINE -- make depend depends on it.

PabloHDF.o: ProcIDs.h
	$(CC) $(CPPFLAGS) $(ALL_CFLAGS) -c $<
PabloHDFf.o: ProcIDs.h PabloHDF.inc
	$(CC) $(CPPFLAGS) $(ALL_CFLAGS) -c $<
PabloHDFff.o: ProcIDs.h PabloHDF.inc
	$(FC) $(FFLAGS) -c $<

#get all the source dependecies.....
# the dependencies don't work well
include depend

