# ****************************************************************************
# * NCSA HDF                                                                 *
# * Software Development Group                                               *
# * National Center for Supercomputing Applications                          *
# * University of Illinois at Urbana-Champaign                               *
# * 605 E. Springfield, Champaign IL 61820                                   *
# *                                                                          *
# * For conditions of distribution and use, see the accompanying             *
# * hdf/COPYING file.                                                        *
# *                                                                          *
# ***************************************************************************
#
# $Id$
#
#
# ##################################################################
#
# This makefile creates HDF test programs.  There are three categories
# of test programs: 
#
#              application layer C test programs 
#              application layer FORTRAN test programs 
#              lower level C test programs 
#
# The application layer C test programs are:
#
#              trig    (8-bit, 24-bit raster image sets and palette interface)
#              tsdnt  (scientific data sets, data only)
#              tsdnnt (same as tdfsd_nt with native number types)
#              tsdmms (scientific data sets, data, max/min and scales)
#              tsdnmms(same as tdfsd_mms with native number types)
#              tsdstr (data and dimension strings: label, unit, format and coordsys)
#              tan     (annotations for HDF objects)
#              tanfile (annotations for HDF files)
#              tstubs  (emulation of old lower level i/o routines)
#              tlitend (Tests Little-endian support)
#
# The application layer FORTRAN test programs are:
#
#              tr8F     (8-bit raster image sets)
#              t24F     (24-bit raster image sets)
#              tpF      (Palettes)
#              tsdntF   (scientific data sets, data only)
#              tsdnntF  (same as tdfsd_nntF except all data types are native
#                           machine number types)
#              tsdmmsF  (scientific data sets, data, max/min and scales)
#	       tsdnmmsF (same as tdfsd_mmsF with native number types)
#              tsdstrF  (data and dimenstrings: label, unit, format and coordsys)
#              tanF     (annotations for HDF objects)
#              tanfileF (annotations for HDF files)
#              tstubsF  (emulation of old lower level i/o routines)
#
# Vset test programs:
#
#	       egchi.c  (high level VSET write routines)
#	       tv1.c    (the basic vgroup and vdata creation routines)
#	       tv2.c    (creates vsets in 2 files simultaneously)
#	       tvers.c  (get version string from an HDF file)
# 	       egfhi.f  (Fortran version of egchi.c)
#
# The lower level C test programs are:
#
#              thfile     (basic i/o)
#              terr       (error handling)
#              thblocks   (linked blocks)
#              thextelt   (i/o involving external files)
#              tvers      (storing and retrieving version strings)
#              thlinkage  (linkage of functions)
#
# Hyperslab Fortran test programs
#              slabw      (write data as 5 slabs )
#              slab1wf    (write data as first 3 of 5 slabs )
#              slab2wf    (write data as last 2 of 5 slabs )
#              slab3wf    (write data as 24 slabs i.e. each element )
#              slab4wf    (write data as 1 slab )
#
# ##################################################################
#
#                      HOW TO USE THIS MAKEFILE
#
# You need df.lib to compile any of these test programs.  You will
# also need selected header files as described below.
#
# To compile the application layer C test programs, enter "nmake ctests".
# If there are test programs that you do not want to compile, do this 
# by removing them from the lines "COBJS=" and "CSRCS=" below.
# You need access to the header files indicated in the "CHDRS=" line
# below to compile these programs. 
#
# To compile the application layer FORTRAN test programs, enter 
# "nmake ftests".  You need access to the header files indicated in
# the "FHDRS=" line below to compile these programs. 
# If there are test programs that you do not want to compile, do this 
# by removing them from the lines "FOBJS=" and "FSRCS=" below.
#
# To compile the lower level C test programs, enter "make htests". 
# You need access to the header files indicated in the "HHDRS=" line
# below to compile these programs.  If there are test programs that 
# you do not want to compile, do this by removing them from the lines
# "HOBJS=" and "HSRCS=" below.
#
# To remove all object files created by this makefile, enter "make clean"
#
# ##################################################################
#
#                       PORTING INSTRUCTIONS
#
# You must modify the lines containing the symbol "==>" to make
# this makefile compatible with your platform.
#
# ##################################################################


.SUFFIXES : .f

# ==> specify your machine
#MACHINE=WIN3
MACHINE=PC

INCDIR=../include
LIBDIR=../lib
BINDIR=../bin

# ==> where are your hdf.h, hdfi.h and vg.h files located?
IFLAGS=   /I../include /I.

# ==> specify your FORTRAN compiler
FC=fl
#FFLAGS= /c /Gt512 /AH /4I4 $(IFLAGS) /W2 /Od /Tf
FFLAGS= /c /AH $(IFLAGS) /W2 /Od /Tf

# ==> specify your C compiler
CC=cl
#CFLAGS=  /c /D$(MACHINE) /ND$* /Gt64 /AH /W4 /Od $(IFLAGS) /Zi /DMALDEBUG
#CFLAGS=  /c /D$(MACHINE) /AH /W4 /Od $(IFLAGS) /Zi /Mq /DTEST_PC
#CFLAGS=  /D$(MACHINE) /AH /W4 /Od $(IFLAGS) /Zi /Mq /DTEST_PC
CFLAGS=  /D$(MACHINE) /Gt32 /AH /W4 /Od $(IFLAGS) /Zi /Mq /DTEST_PC
#CFLAGS=  /c /D$(MACHINE) /ND$* /Gt64 /AH /W4 /Ox $(IFLAGS)

# ==> where is your HDF library (libdf.a) located?
LIBS= ..\lib\df.lib

#BDIR=../backup

# ==> specify your archiver
AR=lib
ARFLAGS=
ARFLAGS2=/NOLOGO /PAGE:32 -+

# ==> specify your linker
LN=link
LNFLAGS=/COD /ST:6118 /SEG:512

# ==> specify your archive randomizer
#RANLIB=ranlib

RM=del
RMFLAGS=
LINTFLAGS=
SHAR=zip
ARCHIVE=hdf.zip

CTESTS= trig.exe tsdstr.exe tsdmms.exe tsdnmms.exe tsdnnt.exe tsdnt.exe tan.exe \
        tanfile.exe tstubs.exe tv1.exe tv2.exe tvers.exe egchi.exe \
        slabw.exe slab1w.exe slab2w.exe slab3w.exe slab4w.exe tlitend.exe

CHDRS = df.h dfi.h dfsd.h vg.h df.h dfi.h dfstubs.h \
        vproto.h

CTSRCS= trig.c tsdstr.c tsdmms.c tsdnmms.c tsdnnt.c \
        tsdnt.c tan.c tanfile.c tstubs.c \
        tv1.c tv2.c tvers.c egchi.c \
        slabw.c slab1w.c slab2w.c slab3w.c slab4w.c tlitend.c

CTOBJS= trig.obj tsdstr.obj tsdmms.obj tsdnt.obj tan.obj tanfile.obj \
        tstubs.obj tsdnmms.obj tsdnnt.obj tv1.obj tv2.obj \
        tvers.obj egchi.obj \
        slabw.obj slab1w.obj slab2w.obj slab3w.obj slab4w.obj tlitend.obj

HTESTS= thfile.exe thfile1.exe terr.exe thblocks.exe thextelt.exe tlinkage.exe
HHDRS = hfile.h hdf.h hdfi.h herr.h hproto.h
HTSRCS= thfile.c thfile1.c terr.c thblocks.c thextelt.c tlinkage.c
HTOBJS= thfile.obj thfile1.obj terr.obj thblocks.obj thextelt.obj tlinkage.obj

FTESTS= tr8f.exe t24f.exe tpf.exe tanf.exe tanfilef.exe tsdstrf.exe tsdntf.exe tsdnntf.exe \
        tsdmmsf.exe tsdnmmsf.exe tstubsf.exe egfhi.exe \
        slabwf.exe slab1wf.exe slab2wf.exe slab3wf.exe slab4wf.exe
FSRCS = tr8f.f t24f.f tpf.f tanf.f tanfilef.f tsdstrf.f tsdntf.f \
        tsdnntf.f tsdmmsf.f  tsdnmmsf.f tstubsf.f egfhi.f \
        slabwf.f slab1wf.f slab2wf.f slab3wf.f slab4wf.f
FOBJS = tr8f.obj t24f.obj tpf.obj tanf.obj tanfilef.obj tsdstrf.obj tsdntf.obj \
        tsdnntf.obj tsdmmsf.obj tsdnmmsf.obj tstubsf.obj egfhi.obj \
        slabwf.obj slab1wf.obj slab2wf.obj slab3wf.obj slab4wf.obj

.c.exe:
    $(CC) $(CFLAGS) $< $(LIBS)
#    $(LN) $(LNFLAGS) $*,$*,$*,$(LIBS);

.f.exe:
    $(FC) $(FFLAGS) $<
    $(LN) $(LNFLAGS) /NOD /NOE $*,$*,$*,$(LIBS) llibc7.lib oldnames.lib llibfor7.lib;

all: ctests ftests htests

nofortran: ctests htests

ctests: $(CTESTS)

ftests: $(FTESTS)

htests: $(HTESTS)
	
trig.exe:  trig.c

tsdstr.exe:    tsdstr.c

tsdnt.exe:    tsdnt.c

tsdmms.exe:    tsdmms.c

tsdnnt.exe:    tsdnnt.c

tsdnmms.exe:    tsdnmms.c

tan.exe:  tan.c

tanfile.exe:     tanfile.c

tstubs.exe:     tstubs.c

tlitend.exe:     tlitend.c

tv1.exe:        tv1.c

tv2.exe:        tv2.c

tvers.exe:      tvers.c

egchi.exe :      egchi.c

tr8f.exe :          tr8f.f

t24f.exe :       t24f.f

tanf.exe :       tanf.f

tanfilef.exe :   tanfilef.f

tpf.exe :   tpf.f

tstubsf.exe :   tstubsf.f

tsdstrf.exe :   tsdstrf.f

tsdntf.exe :   tsdntf.f

tsdnntf.exe :   tsdnntf.f

tsdmmsf.exe :   tsdmmsf.f

tsdnmmsf.exe :   tsdnmmsf.f

egfhi.exe :     egfhi.f

thfile.exe :     thfile.c

thfile1.exe :     thfile1.c

terr.exe :     terr.c

thblocks.exe :     thblocks.c

thextelt.exe :     thextelt.c

tlinkage.exe :     tlinkage.c

slabw.exe : slabw.c

slab1w.exe : slab1w.c

slab2w.exe : slab2w.c

slab3w.exe : slab3w.c

slab4w.exe : slab4w.c

slabwf.exe : slabwf.f

slab1wf.exe : slab1wf.f

slab2wf.exe : slab2wf.f

slab3wf.exe : slab3wf.f

slab4wf.exe : slab4wf.f

clean:
	-$(RM) $(RMFLAGS) *.hdf $(CTESTS) $(HTESTS) $(FTESTS)

